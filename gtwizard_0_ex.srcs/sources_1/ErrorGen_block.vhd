-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\commrshdl\ErrorGen_block.vhd
-- Created: 2024-04-06 12:58:26
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: ErrorGen_block
-- Source Path: commrshdl/ErrorGen/ErrorGen
-- Hierarchy Level: 1
-- Model version: 9.5
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.ErrorGen_pkg.ALL;

ENTITY ErrorGen_block IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        DataIn                            :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
        StartIn                           :   IN    std_logic;
        EndIn                             :   IN    std_logic;
        ValidIn                           :   IN    std_logic;
        DataOut                           :   OUT   std_logic_vector(7 DOWNTO 0);  -- uint8
        StartOut                          :   OUT   std_logic;
        EndOut                            :   OUT   std_logic;
        ValidOut                          :   OUT   std_logic
        );
END ErrorGen_block;


ARCHITECTURE rtl OF ErrorGen_block IS

  -- Component Declarations
  COMPONENT MATLAB_Function
    PORT( sig                             :   IN    std_logic_vector(7 DOWNTO 0);  -- uint8
          validIn                         :   IN    std_logic;
          loc                             :   IN    vector_of_std_logic_vector8(0 TO 3);  -- uint8 [4]
          out_rsvd                        :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  COMPONENT Psuedo_random_Noise
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          PN_Sequence                     :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : MATLAB_Function
    USE ENTITY work.MATLAB_Function(rtl);

  FOR ALL : Psuedo_random_Noise
    USE ENTITY work.Psuedo_random_Noise(rtl);

  -- Signals
  SIGNAL DataIn_unsigned                  : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL ValidIn_1                        : std_logic;
  SIGNAL count_step                       : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_reset                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL HDL_Counter_out1                 : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_1                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL count_2                          : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Noise_locations_out1             : vector_of_unsigned8(0 TO 3);  -- uint8 [4]
  SIGNAL Noise_locations_out1_1           : vector_of_std_logic_vector8(0 TO 3);  -- ufix8 [4]
  SIGNAL out_rsvd                         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL out_unsigned                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay4_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Constant_out1                    : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Psuedo_random_Noise_out1         : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL Psuedo_random_Noise_out1_unsigned : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Switch_out1                      : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL InsertErrors_out1                : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL Delay2_out1                      : std_logic;

BEGIN
  u_MATLAB_Function : MATLAB_Function
    PORT MAP( sig => std_logic_vector(HDL_Counter_out1),  -- uint8
              validIn => ValidIn_1,
              loc => Noise_locations_out1_1,  -- uint8 [4]
              out_rsvd => out_rsvd  -- uint8
              );

  u_Psuedo_random_Noise : Psuedo_random_Noise
    PORT MAP( clk => clk,
              reset => reset,
              enb => enb,
              PN_Sequence => Psuedo_random_Noise_out1  -- uint8
              );

  DataIn_unsigned <= unsigned(DataIn);

  reduced_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ValidIn_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ValidIn_1 <= ValidIn;
      END IF;
    END IF;
  END PROCESS reduced_process;


  -- Free running, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  count_step <= to_unsigned(16#01#, 8);

  count_reset <= to_unsigned(16#00#, 8);

  count <= HDL_Counter_out1 + count_step;

  
  count_1 <= HDL_Counter_out1 WHEN ValidIn_1 = '0' ELSE
      count;

  
  count_2 <= count_1 WHEN StartIn = '0' ELSE
      count_reset;

  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        HDL_Counter_out1 <= count_2;
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Noise_locations_out1(0) <= to_unsigned(16#05#, 8);
  Noise_locations_out1(1) <= to_unsigned(16#17#, 8);
  Noise_locations_out1(2) <= to_unsigned(16#22#, 8);
  Noise_locations_out1(3) <= to_unsigned(16#0C#, 8);

  outputgen: FOR k IN 0 TO 3 GENERATE
    Noise_locations_out1_1(k) <= std_logic_vector(Noise_locations_out1(k));
  END GENERATE;

  out_unsigned <= unsigned(out_rsvd);

  Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay4_out1 <= to_unsigned(16#00#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay4_out1 <= DataIn_unsigned;
      END IF;
    END IF;
  END PROCESS Delay4_process;


  Constant_out1 <= to_unsigned(16#00#, 8);

  Psuedo_random_Noise_out1_unsigned <= unsigned(Psuedo_random_Noise_out1);

  
  Switch_out1 <= Constant_out1 WHEN out_unsigned = to_unsigned(16#00#, 8) ELSE
      Psuedo_random_Noise_out1_unsigned;

  InsertErrors_out1 <= Delay4_out1 XOR Switch_out1;

  DataOut <= std_logic_vector(InsertErrors_out1);

  Delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay_out1 <= StartIn;
      END IF;
    END IF;
  END PROCESS Delay_process;


  StartOut <= Delay_out1;

  Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Delay2_out1 <= EndIn;
      END IF;
    END IF;
  END PROCESS Delay2_process;


  EndOut <= Delay2_out1;

  ValidOut <= ValidIn_1;

END rtl;

