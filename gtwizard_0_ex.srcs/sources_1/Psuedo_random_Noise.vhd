-- -------------------------------------------------------------
-- 
-- File Name: hdlsrc\commrshdl\Psuedo_random_Noise.vhd
-- Created: 2024-04-06 12:58:26
-- 
-- Generated by MATLAB 23.2, HDL Coder 23.2, and Simulink 23.2
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: Psuedo_random_Noise
-- Source Path: commrshdl/ErrorGen/ErrorGen/Psuedo random Noise
-- Hierarchy Level: 2
-- Model version: 9.5
-- 
-- PN Sequence Generator
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY Psuedo_random_Noise IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        PN_Sequence                       :   OUT   std_logic_vector(7 DOWNTO 0)  -- uint8
        );
END Psuedo_random_Noise;


ARCHITECTURE rtl OF Psuedo_random_Noise IS

  -- Signals
  SIGNAL Reset_1                          : std_logic;
  SIGNAL VectorTDL_ctrl_const_out         : std_logic;
  SIGNAL VectorTDL_ctrl_delay_out         : std_logic;
  SIGNAL VectorTDL_Initial_Val_out        : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL InitStates                       : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL TDL_1                            : std_logic;
  SIGNAL TDL_2                            : std_logic;
  SIGNAL PNSeqOut                         : std_logic;
  SIGNAL TDL                              : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL TDL_0                            : std_logic;
  SIGNAL PNSeqOut_1                       : std_logic;
  SIGNAL PNSeqOut_2                       : std_logic;
  SIGNAL PNSeqOut_3                       : std_logic;
  SIGNAL TDL_5                            : std_logic;
  SIGNAL TDL_4                            : std_logic;
  SIGNAL PNSeqOut_4                       : std_logic;
  SIGNAL PNSeqOut_5                       : std_logic;
  SIGNAL TDL_4_1                          : std_logic;
  SIGNAL TDL_3                            : std_logic;
  SIGNAL PNSeqOut_6                       : std_logic;
  SIGNAL PNSeqOut_7                       : std_logic;
  SIGNAL TDL_6                            : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL VectorTDL_out                    : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL TDLPrevious                      : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL OutputMask                       : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR                     : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0                   : std_logic;
  SIGNAL MaskANDtoXOR_1                   : std_logic;
  SIGNAL MaskANDtoXOR_2                   : std_logic;
  SIGNAL MaskANDtoXOR_3                   : std_logic;
  SIGNAL MaskANDtoXOR_4                   : std_logic;
  SIGNAL TDL_7                            : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_5                   : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_1                 : std_logic;
  SIGNAL MaskANDtoXOR_1_1                 : std_logic;
  SIGNAL MaskANDtoXOR_2_1                 : std_logic;
  SIGNAL MaskANDtoXOR_3_1                 : std_logic;
  SIGNAL MaskANDtoXOR_4_1                 : std_logic;
  SIGNAL TDL_8                            : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_6                   : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_2                 : std_logic;
  SIGNAL MaskANDtoXOR_1_2                 : std_logic;
  SIGNAL MaskANDtoXOR_2_2                 : std_logic;
  SIGNAL MaskANDtoXOR_3_2                 : std_logic;
  SIGNAL MaskANDtoXOR_4_2                 : std_logic;
  SIGNAL TDL_9                            : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_7                   : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_3                 : std_logic;
  SIGNAL MaskANDtoXOR_1_3                 : std_logic;
  SIGNAL MaskANDtoXOR_2_3                 : std_logic;
  SIGNAL MaskANDtoXOR_3_3                 : std_logic;
  SIGNAL MaskANDtoXOR_4_3                 : std_logic;
  SIGNAL TDL_10                           : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_8                   : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_4                 : std_logic;
  SIGNAL MaskANDtoXOR_1_4                 : std_logic;
  SIGNAL MaskANDtoXOR_2_4                 : std_logic;
  SIGNAL MaskANDtoXOR_3_4                 : std_logic;
  SIGNAL MaskANDtoXOR_4_4                 : std_logic;
  SIGNAL TDL_11                           : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_9                   : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_5                 : std_logic;
  SIGNAL MaskANDtoXOR_1_5                 : std_logic;
  SIGNAL MaskANDtoXOR_2_5                 : std_logic;
  SIGNAL MaskANDtoXOR_3_5                 : std_logic;
  SIGNAL MaskANDtoXOR_4_5                 : std_logic;
  SIGNAL TDL_12                           : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_10                  : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_6                 : std_logic;
  SIGNAL MaskANDtoXOR_1_6                 : std_logic;
  SIGNAL MaskANDtoXOR_2_6                 : std_logic;
  SIGNAL MaskANDtoXOR_3_6                 : std_logic;
  SIGNAL MaskANDtoXOR_4_6                 : std_logic;
  SIGNAL TDL_13                           : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_11                  : std_logic_vector(5 DOWNTO 0);  -- boolean [6]
  SIGNAL MaskANDtoXOR_0_7                 : std_logic;
  SIGNAL MaskANDtoXOR_1_7                 : std_logic;
  SIGNAL MaskANDtoXOR_2_7                 : std_logic;
  SIGNAL MaskANDtoXOR_3_7                 : std_logic;
  SIGNAL MaskANDtoXOR_4_7                 : std_logic;
  SIGNAL MaskANDtoXOR_5_1                 : std_logic;
  SIGNAL PNSeqBits                        : std_logic;
  SIGNAL MaskANDtoXOR_5_2                 : std_logic;
  SIGNAL PNSeqBits_1                      : std_logic;
  SIGNAL MaskANDtoXOR_5_3                 : std_logic;
  SIGNAL PNSeqBits_2                      : std_logic;
  SIGNAL MaskANDtoXOR_5_4                 : std_logic;
  SIGNAL PNSeqBits_3                      : std_logic;
  SIGNAL MaskANDtoXOR_5_5                 : std_logic;
  SIGNAL PNSeqBits_4                      : std_logic;
  SIGNAL MaskANDtoXOR_5_6                 : std_logic;
  SIGNAL PNSeqBits_5                      : std_logic;
  SIGNAL MaskANDtoXOR_5_7                 : std_logic;
  SIGNAL PNSeqBits_6                      : std_logic;
  SIGNAL MaskANDtoXOR_5_8                 : std_logic;
  SIGNAL PNSeqBits_7                      : std_logic;
  SIGNAL PNUfix                           : unsigned(7 DOWNTO 0);  -- uint8

BEGIN
  Reset_1 <= '0';

  VectorTDL_ctrl_const_out <= '1';

  VectorTDL_ctrl_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      VectorTDL_ctrl_delay_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        VectorTDL_ctrl_delay_out <= VectorTDL_ctrl_const_out;
      END IF;
    END IF;
  END PROCESS VectorTDL_ctrl_delay_process;


  VectorTDL_Initial_Val_out(0) <= '0';
  VectorTDL_Initial_Val_out(1) <= '0';
  VectorTDL_Initial_Val_out(2) <= '0';
  VectorTDL_Initial_Val_out(3) <= '0';
  VectorTDL_Initial_Val_out(4) <= '0';
  VectorTDL_Initial_Val_out(5) <= '1';

  InitStates(0) <= '0';
  InitStates(1) <= '0';
  InitStates(2) <= '0';
  InitStates(3) <= '0';
  InitStates(4) <= '0';
  InitStates(5) <= '1';

  PNSeqOut <= TDL_1 XOR TDL_2;

  TDL_1 <= TDL(1);

  PNSeqOut_1 <= TDL_0 XOR TDL_1;

  TDL_0 <= TDL(0);

  PNSeqOut_3 <= PNSeqOut_2 XOR TDL_0;

  TDL_5 <= TDL(5);

  TDL_4 <= TDL(4);

  PNSeqOut_2 <= TDL_4 XOR TDL_5;

  PNSeqOut_5 <= PNSeqOut_4 XOR PNSeqOut_2;

  TDL_4_1 <= TDL(4);

  PNSeqOut_4 <= TDL_3 XOR TDL_4_1;

  TDL_3 <= TDL(3);

  TDL_2 <= TDL(2);

  PNSeqOut_6 <= TDL_2 XOR TDL_3;

  PNSeqOut_7 <= PNSeqOut_6 XOR PNSeqOut_4;

  TDL_6(0) <= PNSeqOut_7;
  TDL_6(1) <= PNSeqOut_5;
  TDL_6(2) <= PNSeqOut_3;
  TDL_6(3) <= PNSeqOut_1;
  TDL_6(4) <= PNSeqOut;
  TDL_6(5) <= PNSeqOut_6;

  VectorTDL_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      VectorTDL_out <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        VectorTDL_out <= TDL_6;
      END IF;
    END IF;
  END PROCESS VectorTDL_process;


  
  TDLPrevious <= VectorTDL_Initial_Val_out WHEN VectorTDL_ctrl_delay_out = '0' ELSE
      VectorTDL_out;

  
  TDL <= TDLPrevious WHEN Reset_1 = '0' ELSE
      InitStates;

  OutputMask(0) <= '0';
  OutputMask(1) <= '0';
  OutputMask(2) <= '0';
  OutputMask(3) <= '0';
  OutputMask(4) <= '0';
  OutputMask(5) <= '1';


  MaskANDtoXOR_gen: FOR t_0 IN 0 TO 5 GENERATE
    MaskANDtoXOR(t_0) <= TDL(t_0) AND OutputMask(t_0);
  END GENERATE MaskANDtoXOR_gen;


  MaskANDtoXOR_0 <= MaskANDtoXOR(0);

  MaskANDtoXOR_1 <= MaskANDtoXOR(1);

  MaskANDtoXOR_2 <= MaskANDtoXOR(2);

  MaskANDtoXOR_3 <= MaskANDtoXOR(3);

  MaskANDtoXOR_4 <= MaskANDtoXOR(4);

  TDL_7(0) <= PNSeqOut_2;
  TDL_7(1) <= TDL(0);
  TDL_7(2) <= TDL(1);
  TDL_7(3) <= TDL(2);
  TDL_7(4) <= TDL(3);
  TDL_7(5) <= TDL(4);


  MaskANDtoXOR_5_gen: FOR t_01 IN 0 TO 5 GENERATE
    MaskANDtoXOR_5(t_01) <= TDL_7(t_01) AND OutputMask(t_01);
  END GENERATE MaskANDtoXOR_5_gen;


  MaskANDtoXOR_0_1 <= MaskANDtoXOR_5(0);

  MaskANDtoXOR_1_1 <= MaskANDtoXOR_5(1);

  MaskANDtoXOR_2_1 <= MaskANDtoXOR_5(2);

  MaskANDtoXOR_3_1 <= MaskANDtoXOR_5(3);

  MaskANDtoXOR_4_1 <= MaskANDtoXOR_5(4);

  TDL_8(0) <= PNSeqOut_4;
  TDL_8(1) <= PNSeqOut_2;
  TDL_8(2) <= TDL(0);
  TDL_8(3) <= TDL(1);
  TDL_8(4) <= TDL(2);
  TDL_8(5) <= TDL(3);


  MaskANDtoXOR_6_gen: FOR t_02 IN 0 TO 5 GENERATE
    MaskANDtoXOR_6(t_02) <= TDL_8(t_02) AND OutputMask(t_02);
  END GENERATE MaskANDtoXOR_6_gen;


  MaskANDtoXOR_0_2 <= MaskANDtoXOR_6(0);

  MaskANDtoXOR_1_2 <= MaskANDtoXOR_6(1);

  MaskANDtoXOR_2_2 <= MaskANDtoXOR_6(2);

  MaskANDtoXOR_3_2 <= MaskANDtoXOR_6(3);

  MaskANDtoXOR_4_2 <= MaskANDtoXOR_6(4);

  TDL_9(0) <= PNSeqOut_6;
  TDL_9(1) <= PNSeqOut_4;
  TDL_9(2) <= PNSeqOut_2;
  TDL_9(3) <= TDL(0);
  TDL_9(4) <= TDL(1);
  TDL_9(5) <= TDL(2);


  MaskANDtoXOR_7_gen: FOR t_03 IN 0 TO 5 GENERATE
    MaskANDtoXOR_7(t_03) <= TDL_9(t_03) AND OutputMask(t_03);
  END GENERATE MaskANDtoXOR_7_gen;


  MaskANDtoXOR_0_3 <= MaskANDtoXOR_7(0);

  MaskANDtoXOR_1_3 <= MaskANDtoXOR_7(1);

  MaskANDtoXOR_2_3 <= MaskANDtoXOR_7(2);

  MaskANDtoXOR_3_3 <= MaskANDtoXOR_7(3);

  MaskANDtoXOR_4_3 <= MaskANDtoXOR_7(4);

  TDL_10(0) <= PNSeqOut;
  TDL_10(1) <= PNSeqOut_6;
  TDL_10(2) <= PNSeqOut_4;
  TDL_10(3) <= PNSeqOut_2;
  TDL_10(4) <= TDL(0);
  TDL_10(5) <= TDL(1);


  MaskANDtoXOR_8_gen: FOR t_04 IN 0 TO 5 GENERATE
    MaskANDtoXOR_8(t_04) <= TDL_10(t_04) AND OutputMask(t_04);
  END GENERATE MaskANDtoXOR_8_gen;


  MaskANDtoXOR_0_4 <= MaskANDtoXOR_8(0);

  MaskANDtoXOR_1_4 <= MaskANDtoXOR_8(1);

  MaskANDtoXOR_2_4 <= MaskANDtoXOR_8(2);

  MaskANDtoXOR_3_4 <= MaskANDtoXOR_8(3);

  MaskANDtoXOR_4_4 <= MaskANDtoXOR_8(4);

  TDL_11(0) <= PNSeqOut_1;
  TDL_11(1) <= PNSeqOut;
  TDL_11(2) <= PNSeqOut_6;
  TDL_11(3) <= PNSeqOut_4;
  TDL_11(4) <= PNSeqOut_2;
  TDL_11(5) <= TDL(0);


  MaskANDtoXOR_9_gen: FOR t_05 IN 0 TO 5 GENERATE
    MaskANDtoXOR_9(t_05) <= TDL_11(t_05) AND OutputMask(t_05);
  END GENERATE MaskANDtoXOR_9_gen;


  MaskANDtoXOR_0_5 <= MaskANDtoXOR_9(0);

  MaskANDtoXOR_1_5 <= MaskANDtoXOR_9(1);

  MaskANDtoXOR_2_5 <= MaskANDtoXOR_9(2);

  MaskANDtoXOR_3_5 <= MaskANDtoXOR_9(3);

  MaskANDtoXOR_4_5 <= MaskANDtoXOR_9(4);

  TDL_12(0) <= PNSeqOut_3;
  TDL_12(1) <= PNSeqOut_1;
  TDL_12(2) <= PNSeqOut;
  TDL_12(3) <= PNSeqOut_6;
  TDL_12(4) <= PNSeqOut_4;
  TDL_12(5) <= PNSeqOut_2;


  MaskANDtoXOR_10_gen: FOR t_06 IN 0 TO 5 GENERATE
    MaskANDtoXOR_10(t_06) <= TDL_12(t_06) AND OutputMask(t_06);
  END GENERATE MaskANDtoXOR_10_gen;


  MaskANDtoXOR_0_6 <= MaskANDtoXOR_10(0);

  MaskANDtoXOR_1_6 <= MaskANDtoXOR_10(1);

  MaskANDtoXOR_2_6 <= MaskANDtoXOR_10(2);

  MaskANDtoXOR_3_6 <= MaskANDtoXOR_10(3);

  MaskANDtoXOR_4_6 <= MaskANDtoXOR_10(4);

  TDL_13(0) <= PNSeqOut_5;
  TDL_13(1) <= PNSeqOut_3;
  TDL_13(2) <= PNSeqOut_1;
  TDL_13(3) <= PNSeqOut;
  TDL_13(4) <= PNSeqOut_6;
  TDL_13(5) <= PNSeqOut_4;


  MaskANDtoXOR_11_gen: FOR t_07 IN 0 TO 5 GENERATE
    MaskANDtoXOR_11(t_07) <= TDL_13(t_07) AND OutputMask(t_07);
  END GENERATE MaskANDtoXOR_11_gen;


  MaskANDtoXOR_0_7 <= MaskANDtoXOR_11(0);

  MaskANDtoXOR_1_7 <= MaskANDtoXOR_11(1);

  MaskANDtoXOR_2_7 <= MaskANDtoXOR_11(2);

  MaskANDtoXOR_3_7 <= MaskANDtoXOR_11(3);

  MaskANDtoXOR_4_7 <= MaskANDtoXOR_11(4);

  MaskANDtoXOR_5_1 <= MaskANDtoXOR(5);

  PNSeqBits <= MaskANDtoXOR_5_1 XOR (MaskANDtoXOR_4 XOR (MaskANDtoXOR_3 XOR (MaskANDtoXOR_2 XOR (MaskANDtoXOR_0 XOR MaskANDtoXOR_1))));

  MaskANDtoXOR_5_2 <= MaskANDtoXOR_5(5);

  PNSeqBits_1 <= MaskANDtoXOR_5_2 XOR (MaskANDtoXOR_4_1 XOR (MaskANDtoXOR_3_1 XOR (MaskANDtoXOR_2_1 XOR (MaskANDtoXOR_0_1 XOR MaskANDtoXOR_1_1))));

  MaskANDtoXOR_5_3 <= MaskANDtoXOR_6(5);

  PNSeqBits_2 <= MaskANDtoXOR_5_3 XOR (MaskANDtoXOR_4_2 XOR (MaskANDtoXOR_3_2 XOR (MaskANDtoXOR_2_2 XOR (MaskANDtoXOR_0_2 XOR MaskANDtoXOR_1_2))));

  MaskANDtoXOR_5_4 <= MaskANDtoXOR_7(5);

  PNSeqBits_3 <= MaskANDtoXOR_5_4 XOR (MaskANDtoXOR_4_3 XOR (MaskANDtoXOR_3_3 XOR (MaskANDtoXOR_2_3 XOR (MaskANDtoXOR_0_3 XOR MaskANDtoXOR_1_3))));

  MaskANDtoXOR_5_5 <= MaskANDtoXOR_8(5);

  PNSeqBits_4 <= MaskANDtoXOR_5_5 XOR (MaskANDtoXOR_4_4 XOR (MaskANDtoXOR_3_4 XOR (MaskANDtoXOR_2_4 XOR (MaskANDtoXOR_0_4 XOR MaskANDtoXOR_1_4))));

  MaskANDtoXOR_5_6 <= MaskANDtoXOR_9(5);

  PNSeqBits_5 <= MaskANDtoXOR_5_6 XOR (MaskANDtoXOR_4_5 XOR (MaskANDtoXOR_3_5 XOR (MaskANDtoXOR_2_5 XOR (MaskANDtoXOR_0_5 XOR MaskANDtoXOR_1_5))));

  MaskANDtoXOR_5_7 <= MaskANDtoXOR_10(5);

  PNSeqBits_6 <= MaskANDtoXOR_5_7 XOR (MaskANDtoXOR_4_6 XOR (MaskANDtoXOR_3_6 XOR (MaskANDtoXOR_2_6 XOR (MaskANDtoXOR_0_6 XOR MaskANDtoXOR_1_6))));

  MaskANDtoXOR_5_8 <= MaskANDtoXOR_11(5);

  PNSeqBits_7 <= MaskANDtoXOR_5_8 XOR (MaskANDtoXOR_4_7 XOR (MaskANDtoXOR_3_7 XOR (MaskANDtoXOR_2_7 XOR (MaskANDtoXOR_0_7 XOR MaskANDtoXOR_1_7))));

  PNUfix <= unsigned'(PNSeqBits & PNSeqBits_1 & PNSeqBits_2 & PNSeqBits_3 & PNSeqBits_4 & PNSeqBits_5 & PNSeqBits_6 & PNSeqBits_7);

  PN_Sequence <= std_logic_vector(PNUfix);

END rtl;

